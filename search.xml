<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown-Demo]]></title>
    <url>%2F2017%2FMarkdown-Demo%2F</url>
    <content type="text"><![CDATA[引用 一级引用一级引用 二级引用前面不用单独&gt;二级引用结束后要单独用&gt; 又是一级引用 上面演示员源文件123456&gt;一级引用&gt;一级引用&gt;&gt;二级引用前面不用单独&gt;&gt;&gt;二级引用结束后要单独用&gt;&gt;&gt;又是一级引用 无序序列 前面是 ‘+’ 前面是 ‘-‘ 前面是 ‘*’ 上面演示员源文件123+ 前面是&apos;+&apos;- 前面是&apos;-&apos;* 前面是 &apos;*&apos; 引用+无序列表 一级引用还是一级引用 二级引用了 序列 *，加了’*’为什么感觉变成下一级引用了，不科学 还是序列前面没’*’了 前面没’*’了，并且上面空了一行 回到一级引用，上面空了一行 上面演示员源文件12345678910&gt;一级引用&gt;还是一级引用&gt;&gt; 二级引用了&gt;&gt; * 序列 \*，加了&apos;*&apos;为什么感觉变成下一级引用了，不科学&gt;&gt; * 还是序列&gt;&gt; 前面没&apos;*&apos;了&gt;&gt; &gt;&gt; 前面没&apos;*&apos;了，并且上面空了一行&gt;&gt;回到一级引用，上面空了一行 asa 超链接http://localhost:4000上面演示员源文件1[http://localhost:4000](http://localhost:4000)]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Demo</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[code-test]]></title>
    <url>%2F2017%2Fcode-test%2F</url>
    <content type="text"><![CDATA[默认123$ hexo s$ hexo d$ hexo clean c123456#include &lt;stdio.h&gt;int main()&#123; printf("Hello world!\n"); return 0;&#125; cpp1234567#include &lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;"Hello world!"&lt;&lt;endl; return 0;&#125; python Python2 1print ("Hello world") Python3 1print "Hello world" Java12345public class Demo&#123; public static void main(String[] args) &#123; System.out.println("Hello World!"); &#125;&#125; 原来打算安装这个插件的,但是后来发现默认的可以用,就没用https://github.com/ele828/hexo-prism-plugin这个了]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[demo]]></title>
    <url>%2F2017%2Fdemo%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>aa</category>
      </categories>
      <tags>
        <tag>aa</tag>
        <tag>bb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github怎么绑定自己的域名？]]></title>
    <url>%2F2017%2Fgithub%E6%80%8E%E4%B9%88%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[1、在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如http://xxxx.com，注意前面没有http://也没有www，然后上传部署。12$ hexo g$ hexo d 2、在域名解析提供商，下面以dnspod为例。（1）先添加一个CNAME，主机记录写@，后面记录值写上你的http://xxxx.github.io（2）再添加一个CNAME，主机记录写www，后面记录值也是http://xxxx.github.io这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成http://xxxx.github.io，然后根据CNAME再变成http://xxx.com，即中间是经过一次转换的）。上面，我们用的是CNAME别名记录，也有人使用A记录，后面的记录值是写github page里面的ip地址，但有时候IP地址会更改，导致最后解析不正确，所以还是推荐用CNAME别名记录要好些，不建议用IP。3、等十分钟左右，刷新浏览器，用你自己域名访问下试试 PS:原作者的服务器应该不是腾讯云，因为我的记录值要填IP,而第二个填网址要根据网址得到对应的IP,只需在命令行执行下面代码:1ping xxx.github.io 注意:不要加 http:// 作者：skycrown链接：https://www.zhihu.com/question/31377141/answer/87541858来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[biao-qian]]></title>
    <url>%2F2017%2Fbiao-qian-demo%2F</url>
    <content type="text"><![CDATA[添加「标签」页面新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子： 12345title: 标签测试文章tags: - Testing - Another Tag--- 新建页面在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ：12$ cd your-hexo-site$ hexo new page tags 设置页面类型 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：1234title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;--- 修改菜单在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下:1234menu: home: / archives: /archives tags: /tags 分类的做法与上面相似]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>biaoqian</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分类测试文章]]></title>
    <url>%2F2017%2F%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[分类测试文章]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[标签测试文章]]></title>
    <url>%2F2017%2F%E6%A0%87%E7%AD%BE%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[1 b标签测试文章]]></content>
      <tags>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[new-hexo-blog]]></title>
    <url>%2F2017%2Fnew-hexo-blog%2F</url>
    <content type="text"><![CDATA[鼠标右键任意地方，选择Git Bash， 1$ npm install hexo-cli -g 如果之后在使用的过程中，遇到以下的错误 1ERROR Deployer not found : github 则运行以下命令,或者你直接先运行这个命令更好。 1$ npm install hexo-deployer-git --save 接下来创建放置博客文件的文件夹：hexo文件夹。在自己想要的位置创建文件夹点击鼠标右键，选择Git Bash，执行以下命令， 1$ hexo init Hexo会自动在该文件夹下下载搭建网站所需的所有文件。这个会卡一下 ##安装依赖包 1$ npm install 然后用浏览器访问http://localhost:4000/此时，你应该看到了一个漂亮的博客了，当然这个博客只是在本地的 创建repositorywooyunfeng.github.io 部署本地文件到github既然Repository已经创建了，当然是先把博客放到Github上去看看效果。编辑E：\hexo下的_config.yml文件.在_config.yml最下方，添加如下配置(命令中的第一个huangjunhui为Github的用户名,第二个huangjunhui为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现ERROR Deployer not found : github，则参考上文的解决方法。1234deploy: type: git repository: http://github.com/wooyunfeng/wooyunfeng.github.io.git branch: master 配置好_config.yml并保存后，执行以下命令部署到Github上。 12$ hexo g$ hexo d 搭建 hexo，在执行 hexo deploy 后,出现 error deployer not found:github 的错误npm install hexo-deployer-git –save重新 deploy 即可 执行上面的第二个命令，可能会要你输入用户名和密码，皆为注册Github时的数据，输入密码是不显示任何东西的，输入完毕回车即可。此时，我们的博客已经搭建起来，并发布到Github上了，这时可以登陆自己的Github查看代码是否已经推送到对应Repository，在浏览器访问huangjunhui.github.io就能看到自己的博客了。第一次访问地址，可能访问不了，您可以在几分钟后进行访问，一般不超过10分钟。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>